package core.intrinsics.types

//
// Simple: bool, number, simd, pointer, enum
// Number: int, float
// Int: u8, .., u64  i8, .., i64
// Float: f32 f64
// Simd: v128 i8x16 i16x8 i32x4 i64x2 f32x4 f64x2
// Pointer: &T rawptr
// Compound: array, slice, struct
// Array: [$N] $T
// Slice: [] $T
// Function: () -> void

type_is_bool     :: interface (T: type_expr) #intrinsic
type_is_int      :: interface (T: type_expr) #intrinsic
type_is_float    :: interface (T: type_expr) #intrinsic
type_is_number   :: interface (T: type_expr) #intrinsic
type_is_simd     :: interface (T: type_expr) #intrinsic
type_is_pointer  :: interface (T: type_expr) #intrinsic
type_is_enum     :: interface (T: type_expr) #intrinsic
type_is_simple   :: interface (T: type_expr) #intrinsic
type_is_array    :: interface (T: type_expr) #intrinsic
type_is_slice    :: interface (T: type_expr) #intrinsic
type_is_struct   :: interface (T: type_expr) #intrinsic
type_is_compound :: interface (T: type_expr) #intrinsic
type_is_function :: interface (T: type_expr) #intrinsic

